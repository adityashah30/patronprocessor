#!/usr/bin/python
# Author: Aditya Shah
# Date: 02/11/2013
# Objective: To process the patron out file generated by LIBSYS software and make a csv file to import directly to koha
import re
import sys
import readline

global prevVal

def extractRecords(line):
	recordFile.write(line)

def extractID(line):
	if(idPattern.match(line)!=None and namePattern.match(line)==None and categoryPattern.match(line)==None and datePattern.match(line)==None):
		return True
	else:
		return False 

def extractCategory(line):
	if(categoryPattern.match(line)!=None):
		return True
	else:
		return False 

def extractName(line):
	if(namePattern.match(line)!=None and idPattern.match(line)==None and categoryPattern.match(line)==None and datePattern.match(line)==None):
		return True
	else:
		return False 

def extractDate(line):
	if(datePattern.match(line)!=None ):
		return True
	else:
		return False

def removeQuotes(catList):
	global prevVal
	if(catList[0]=='\"'):
		catList[0]=prevVal
	else:
		prevVal=catList[0]

def recordProcessor(line):
	splitLine=line.split()
	idStr=filter(extractID,splitLine)				#extract the id component from the record
	nameStr=filter(extractName,splitLine)			#extraxt the name component from the record
	catStr=filter(extractCategory, splitLine)		#extract the category component from the record
	dateStr=filter(extractDate,splitLine)			#extract the date component from the record
	removeQuotes(catStr)							#replace the " with the appropriate values
	newstr="BITSG"+","
	namelen=len(nameStr)
	datelen=len(dateStr)
	i=0
	for ID in idStr:
		newstr+=ID+","
	i=0
	if namelen == 1:
		newstr+=","+nameStr[0]+","
	else:
		for names in nameStr:
			i=i+1
			if i == namelen:
				newstr+=names+","
			elif i == namelen-1:
				newstr+=names+","
			else:
				newstr+=names+" "
	for cat in catStr:
		newstr+=cat+","
	i=0
	for dates in dateStr:
		i=i+1
		if i == datelen:
			newstr+=dates
		else:
			newstr+=dates+","
	recordcsvFile.write(newstr+"\n")
	print newstr

#########################################################
#					Main program Starts					#
#########################################################

idPattern=re.compile(r'^[A-Z]*[0-9]+[A-Z]*[0-9]*[A-Z]*')		#The RE for the code ie ID Numbers.
namePattern=re.compile(r'^[A-Za-z\'\.]+$')
categoryPattern=re.compile(r'^((ADJ)|(CONT)|(DEPT)|(HD)|(MED)|(PA)|(PS)|(REAS)|(STAFF)|(STU)|(TA)|(TEACH)|(\"))$')	# Insert all the categories here. Also add a \" to handle the " in the file
datePattern=re.compile(r'[0-3]*[0-9][/][0-9][0-9][/][2][0][01][0-9]')

readline.parse_and_bind('tab: complete')	#To enable the autocomplete feature like terminal while taking input
memberfile=raw_input("Enter the path of the patron file: ")
recordfile=raw_input("Enter the path of the file where records are to be stored: ")
recordFile=open(recordfile,'w')
recordcsvfile=raw_input("Enter the path of the final csv file: ")
recordcsvFile=open(recordcsvfile,'w')
with open(memberfile,'r') as inputFile:
	for line in inputFile:
		if(idPattern.match(line)!=None):	#To ensure that only the lines starting with ID numbers ie Code are chosen
			extractRecords(line)

recordFile.close()
print "Records File created!"

with open(recordfile,'r') as inputFile:
	recordcsvFile.write("branchcode,cardnumber,firstname,surname,categorycode,dateenrolled,dateexpiry"+"\n")
	for line in inputFile:
		recordProcessor(line)
recordcsvFile.close()
print "Records CSV File created"

#########################################################
#					Main program Ends					#
#########################################################